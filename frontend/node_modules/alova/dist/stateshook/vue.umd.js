/**
  * @alova/client 2.0.0 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2024 Scott hu. All Rights Reserved
  * Licensed under MIT (https://github.com/alovajs/alova/blob/main/LICENSE)
*/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :
  typeof define === 'function' && define.amd ? define(['vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.vueHook = factory(global.Vue));
})(this, (function (vue$1) { 'use strict';

  /**
    * @alova/shared 1.0.5 (undefined)
    * Document undefined
    * Copyright 2024 Scott Hu. All Rights Reserved
    * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
  */


  const undefStr$1 = 'undefined';
  const undefinedValue = undefined;
  const setTimeoutFn$1 = (fn, delay = 0) => setTimeout(fn, delay);
  // 是否为服务端运行，node和bun通过process判断，deno通过Deno判断
  // 部分框架（如支付宝和 uniapp）会注入 process 对象作为全局变量使用
  // 因此使用服务端独有的 process.cwd 函数作为判断依据
  typeof window === undefStr$1 &&
      (typeof process !== undefStr$1 ? typeof process.cwd === 'function' : typeof Deno !== undefStr$1);
  /**
   * 创建同步多次调用只在异步执行一次的执行器
   */
  const createSyncOnceRunner = (delay = 0) => {
      let timer = undefinedValue;
      // 执行多次调用此函数将异步执行一次
      return (fn) => {
          if (timer) {
              clearTimeout(timer);
          }
          timer = setTimeoutFn$1(fn, delay);
      };
  };

  /**
    * @alova/shared 1.0.5 (undefined)
    * Document undefined
    * Copyright 2024 Scott Hu. All Rights Reserved
    * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
  */

  const undefStr = 'undefined';
  const trueValue = true;
  const setTimeoutFn = (fn, delay = 0) => setTimeout(fn, delay);
  const forEach = (ary, fn) => ary.forEach(fn);
  // 是否为服务端运行，node和bun通过process判断，deno通过Deno判断
  // 部分框架（如支付宝和 uniapp）会注入 process 对象作为全局变量使用
  // 因此使用服务端独有的 process.cwd 函数作为判断依据
  typeof window === undefStr &&
      (typeof process !== undefStr ? typeof process.cwd === 'function' : typeof Deno !== undefStr);

  // Vue的预定义hooks
  var vue = {
      name: 'Vue',
      create: data => vue$1.ref(data),
      dehydrate: state => state.value,
      update: (newVal, state) => {
          state.value = newVal;
      },
      effectRequest({ handler, removeStates, immediate, watchingStates }) {
          // 当在组件内部使用时，组件卸载时移除对应状态
          if (vue$1.getCurrentInstance()) {
              vue$1.onUnmounted(removeStates);
              vue$1.onMounted(() => immediate && handler());
          }
          else {
              // 在非组件内部使用时，使用定时器延迟执行
              setTimeoutFn(() => {
                  immediate && handler();
              });
          }
          const syncRunner = createSyncOnceRunner();
          forEach(watchingStates || [], (state, i) => {
              vue$1.watch(state, () => {
                  syncRunner(() => {
                      handler(i);
                  });
              }, { deep: trueValue });
          });
      },
      computed: getter => vue$1.computed(getter),
      watch: (states, callback) => {
          vue$1.watch(states, callback, {
              deep: trueValue
          });
      },
      onMounted: callback => {
          if (vue$1.getCurrentInstance()) {
              vue$1.onMounted(callback);
          }
          else {
              setTimeoutFn(callback, 10);
          }
      },
      onUnmounted: callback => {
          vue$1.getCurrentInstance() && vue$1.onUnmounted(callback);
      }
  };

  return vue;

}));
