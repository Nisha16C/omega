/**
  * @alova/client 2.0.0 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2024 Scott hu. All Rights Reserved
  * Licensed under MIT (https://github.com/alovajs/alova/blob/main/LICENSE)
*/

'use strict';

var vars = require('@alova/shared/vars');
var vueDemi$1 = require('vue-demi');

// Vue的预定义hooks
var vueDemi = {
    name: 'VueDemi',
    create: data => vueDemi$1.ref(data),
    dehydrate: state => state.value,
    update: (newVal, state) => {
        state.value = newVal;
    },
    effectRequest({ handler, removeStates, immediate, watchingStates }) {
        // 当在组件内部使用时，组件卸载时移除对应状态
        if (vueDemi$1.getCurrentInstance()) {
            vueDemi$1.onUnmounted(removeStates);
            vueDemi$1.onMounted(() => immediate && handler());
        }
        else {
            // 在非组件内部使用时，使用定时器延迟执行
            vars.setTimeoutFn(() => {
                immediate && handler();
            });
        }
        let timer;
        vars.forEach(watchingStates || [], (state, i) => {
            vueDemi$1.watch(state, () => {
                timer && vars.clearTimeoutTimer(timer);
                timer = vars.setTimeoutFn(() => {
                    handler(i);
                    timer = vars.undefinedValue;
                });
            }, { deep: vars.trueValue });
        });
    },
    computed: getter => vueDemi$1.computed(getter),
    watch: (states, callback) => {
        vueDemi$1.watch(states, callback, {
            deep: vars.trueValue
        });
    },
    onMounted: callback => {
        vueDemi$1.onMounted(callback);
    },
    onUnmounted: callback => {
        vueDemi$1.onUnmounted(callback);
    }
};

module.exports = vueDemi;
