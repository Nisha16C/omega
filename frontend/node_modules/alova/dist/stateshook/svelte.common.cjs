/**
  * @alova/client 2.0.0 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2024 Scott hu. All Rights Reserved
  * Licensed under MIT (https://github.com/alovajs/alova/blob/main/LICENSE)
*/

'use strict';

var _function = require('@alova/shared/function');
var vars = require('@alova/shared/vars');
var svelte$1 = require('svelte');
var store = require('svelte/store');

var svelte = {
    name: 'Svelte',
    create: data => store.writable(data),
    dehydrate: state => {
        let raw;
        // 订阅时会立即执行一次函数，获取到值后立即调用解除订阅函数
        state.subscribe(value => {
            raw = value;
        })();
        return raw;
    },
    update: (newVal, state) => {
        state.set(newVal);
    },
    effectRequest({ handler, removeStates, immediate, watchingStates }) {
        // 组件卸载时移除对应状态
        svelte$1.onDestroy(removeStates);
        svelte$1.onMount(() => immediate && handler());
        let needEmit = vars.falseValue;
        const syncRunner = _function.createSyncOnceRunner(10);
        vars.forEach(watchingStates || [], (state, i) => {
            state.subscribe(() => {
                syncRunner(() => {
                    // svelte的writable默认会触发一次，因此当immediate为false时需要过滤掉第一次触发调用
                    needEmit ? handler(i) : (needEmit = vars.trueValue);
                });
            });
        });
    },
    computed: (getter, depList) => store.derived(depList, getter),
    watch: (states, callback) => {
        let needEmit = vars.falseValue;
        const syncRunner = _function.createSyncOnceRunner();
        states.forEach(state => {
            state.subscribe(() => {
                syncRunner(() => {
                    needEmit ? callback() : (needEmit = vars.trueValue);
                });
            });
        });
    },
    onMounted: callback => {
        svelte$1.onMount(callback);
    },
    onUnmounted: callback => {
        svelte$1.onDestroy(callback);
    }
};

module.exports = svelte;
