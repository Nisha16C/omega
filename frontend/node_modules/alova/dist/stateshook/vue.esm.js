/**
  * @alova/client 2.0.0 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2024 Scott hu. All Rights Reserved
  * Licensed under MIT (https://github.com/alovajs/alova/blob/main/LICENSE)
*/

import { createSyncOnceRunner } from '@alova/shared/function';
import { setTimeoutFn, forEach, trueValue } from '@alova/shared/vars';
import { ref, getCurrentInstance, onUnmounted, onMounted, watch, computed } from 'vue';

// Vue的预定义hooks
var vue = {
    name: 'Vue',
    create: data => ref(data),
    dehydrate: state => state.value,
    update: (newVal, state) => {
        state.value = newVal;
    },
    effectRequest({ handler, removeStates, immediate, watchingStates }) {
        // 当在组件内部使用时，组件卸载时移除对应状态
        if (getCurrentInstance()) {
            onUnmounted(removeStates);
            onMounted(() => immediate && handler());
        }
        else {
            // 在非组件内部使用时，使用定时器延迟执行
            setTimeoutFn(() => {
                immediate && handler();
            });
        }
        const syncRunner = createSyncOnceRunner();
        forEach(watchingStates || [], (state, i) => {
            watch(state, () => {
                syncRunner(() => {
                    handler(i);
                });
            }, { deep: trueValue });
        });
    },
    computed: getter => computed(getter),
    watch: (states, callback) => {
        watch(states, callback, {
            deep: trueValue
        });
    },
    onMounted: callback => {
        if (getCurrentInstance()) {
            onMounted(callback);
        }
        else {
            setTimeoutFn(callback, 10);
        }
    },
    onUnmounted: callback => {
        getCurrentInstance() && onUnmounted(callback);
    }
};

export { vue as default };
