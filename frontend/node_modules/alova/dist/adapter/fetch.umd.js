/**
  * alova 3.0.17 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2024 Scott Hu. All Rights Reserved
  * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
*/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.alovaFetch = factory());
})(this, (function () { 'use strict';

  /**
    * @alova/shared 1.0.5 (undefined)
    * Document undefined
    * Copyright 2024 Scott Hu. All Rights Reserved
    * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
  */


  const undefStr$1 = 'undefined';
  const ObjectCls$1 = Object;
  const typeOf = (arg) => typeof arg;
  // 是否为服务端运行，node和bun通过process判断，deno通过Deno判断
  // 部分框架（如支付宝和 uniapp）会注入 process 对象作为全局变量使用
  // 因此使用服务端独有的 process.cwd 函数作为判断依据
  typeof window === undefStr$1 &&
      (typeof process !== undefStr$1 ? typeof process.cwd === 'function' : typeof Deno !== undefStr$1);
  /**
   * 判断参数是否为字符串
   * @param arg 任意参数
   * @returns 该参数是否为字符串
   */
  const isString = (arg) => typeOf(arg) === 'string';
  /**
   * 全局的toString
   * @param arg 任意参数
   * @returns 字符串化的参数
   */
  const globalToString = (arg) => ObjectCls$1.prototype.toString.call(arg);
  /**
   * 判断是否为某个类的实例
   * @param arg 任意参数
   * @returns 判断结果
   */
  const instanceOf = (arg, cls) => arg instanceof cls;
  /**
   * 是否为特殊数据
   * @param data 提交数据
   * @returns 判断结果
   */
  const isSpecialRequestBody = (data) => {
      const dataTypeString = globalToString(data);
      return (/^\[object (Blob|FormData|ReadableStream|URLSearchParams)\]$/i.test(dataTypeString) || instanceOf(data, ArrayBuffer));
  };
  /**
   * 创建类实例
   * @param Cls 构造函数
   * @param args 构造函数参数
   * @returns 类实例
   */
  const newInstance = (Cls, ...args) => new Cls(...args);

  /**
    * @alova/shared 1.0.5 (undefined)
    * Document undefined
    * Copyright 2024 Scott Hu. All Rights Reserved
    * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
  */

  const undefStr = 'undefined';
  // 以下为减少编译代码量而添加的统一处理函数或变量
  const PromiseCls = Promise;
  const promiseReject = (value) => PromiseCls.reject(value);
  const ObjectCls = Object;
  const undefinedValue = undefined;
  const trueValue = true;
  const falseValue = false;
  const JSONStringify = (value, replacer, space) => JSON.stringify(value, replacer, space);
  const setTimeoutFn = (fn, delay = 0) => setTimeout(fn, delay);
  const clearTimeoutTimer = (timer) => clearTimeout(timer);
  // 是否为服务端运行，node和bun通过process判断，deno通过Deno判断
  // 部分框架（如支付宝和 uniapp）会注入 process 对象作为全局变量使用
  // 因此使用服务端独有的 process.cwd 函数作为判断依据
  typeof window === undefStr &&
      (typeof process !== undefStr ? typeof process.cwd === 'function' : typeof Deno !== undefStr);

  const isBodyData = (data) => isString(data) || isSpecialRequestBody(data);
  function adapterFetch() {
      return (elements, method) => {
          const adapterConfig = method.config;
          const timeout = adapterConfig.timeout || 0;
          const ctrl = new AbortController();
          const { data, headers } = elements;
          const isContentTypeSet = /content-type/i.test(ObjectCls.keys(headers).join());
          const isDataFormData = data && data.toString() === '[object FormData]';
          // 未设置Content-Type并且data不是FormData对象时，默认设置Content-Type为application/json
          if (!isContentTypeSet && !isDataFormData) {
              headers['Content-Type'] = 'application/json;charset=UTF-8';
          }
          const fetchPromise = fetch(elements.url, {
              ...adapterConfig,
              method: elements.type,
              signal: ctrl.signal,
              body: isBodyData(data) ? data : JSONStringify(data)
          });
          // 设置了中断时间，则在指定时间后中断请求
          let abortTimer;
          let isTimeout = falseValue;
          if (timeout > 0) {
              abortTimer = setTimeoutFn(() => {
                  isTimeout = trueValue;
                  ctrl.abort();
              }, timeout);
          }
          return {
              response: () => fetchPromise.then(response => {
                  // 请求成功后清除中断处理
                  clearTimeoutTimer(abortTimer);
                  // Response的Readable只能被读取一次，需要克隆才可重复使用
                  return response.clone();
              }, err => promiseReject(isTimeout ? newInstance(Error, 'fetchError: network timeout') : err)),
              // headers函数内的then需捕获异常，否则会导致内部无法获取到正确的错误对象
              headers: () => fetchPromise.then(({ headers: responseHeaders }) => responseHeaders, () => ({})),
              // 因nodeFetch库限制，这块代码无法进行单元测试，但已在浏览器中通过测试
              /* c8 ignore start */
              onDownload: async (cb) => {
                  let isAborted = falseValue;
                  const response = await fetchPromise.catch(() => {
                      isAborted = trueValue;
                  });
                  if (!response)
                      return;
                  const { headers: responseHeaders, body } = response.clone();
                  const reader = body ? body.getReader() : undefinedValue;
                  const total = Number(responseHeaders.get('Content-Length') || responseHeaders.get('content-length') || 0);
                  if (total <= 0) {
                      return;
                  }
                  let loaded = 0;
                  if (reader) {
                      const pump = () => reader.read().then(({ done, value = new Uint8Array() }) => {
                          if (done || isAborted) {
                              isAborted && cb(total, 0);
                          }
                          else {
                              loaded += value.byteLength;
                              cb(total, loaded);
                              return pump();
                          }
                      });
                      pump();
                  }
              },
              onUpload() {
                  // eslint-disable-next-line no-console
                  console.error("fetch API does'nt support uploading progress. please consider to change `@alova/adapter-xhr` or `@alova/adapter-axios`");
              },
              /* c8 ignore stop */
              abort: () => {
                  ctrl.abort();
                  clearTimeoutTimer(abortTimer);
              }
          };
      };
  }

  return adapterFetch;

}));
