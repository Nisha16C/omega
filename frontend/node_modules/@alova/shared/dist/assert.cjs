/**
  * @alova/shared 1.0.5 (undefined)
  * Document undefined
  * Copyright 2024 Scott Hu. All Rights Reserved
  * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
*/

'use strict';

const undefStr = 'undefined';
// 是否为服务端运行，node和bun通过process判断，deno通过Deno判断
// 部分框架（如支付宝和 uniapp）会注入 process 对象作为全局变量使用
// 因此使用服务端独有的 process.cwd 函数作为判断依据
typeof window === undefStr &&
    (typeof process !== undefStr ? typeof process.cwd === 'function' : typeof Deno !== undefStr);

/**
 * 创建类实例
 * @param Cls 构造函数
 * @param args 构造函数参数
 * @returns 类实例
 */
const newInstance = (Cls, ...args) => new Cls(...args);

/**
 * alova错误类
 */
class AlovaError extends Error {
    constructor(prefix, message, errorCode) {
        super(message + (errorCode ? `\n\nFor detailed: https://alova.js.org/error#${errorCode}` : ''));
        this.name = `[alova${prefix ? `/${prefix}` : ''}]`;
    }
}
/**
 * 自定义断言函数，表达式为false时抛出错误
 * 当传入了errorCode时，将提供链接到错误文档，引导用户改正
 * @param expression 判断表达式，true或false
 * @param message 断言消息
 */
const createAssert = (prefix = '') => (expression, message, errorCode) => {
    if (!expression) {
        throw newInstance(AlovaError, prefix, message, errorCode);
    }
};

exports.AlovaError = AlovaError;
exports.createAssert = createAssert;
