export type CallbackFn = () => void;
export declare class QueueCallback {
    protected limit?: (number | null) | undefined;
    private callbackQueue;
    private isProcessing;
    private interrupt;
    /**
     * @param [limit=null] no limit if set undefined or null
     * @param [initialProcessing=false]
     */
    constructor(limit?: (number | null) | undefined, initialProcessing?: boolean);
    /**
     * Adds a callback function to the callback queue.
     * If a limit is set and the queue has reached its limit, the callback will not be added.
     * @param callback The callback function to be added to the queue.
     */
    queueCallback(callback: CallbackFn): void;
    /**
     * Tries to run the callbacks in the queue.
     * If there are callbacks in the queue, it removes the first callback and executes it.
     * This method is called recursively until there are no more callbacks in the queue.
     */
    tryRunQueueCallback(): Promise<void>;
    /**
     * If set the param `state` to true, it will interrupt the current job (whether or not the current processing state is true)
     * If set the param `state` to false, then get on with the rest of the work
     */
    setProcessingState(state: boolean): void;
}
