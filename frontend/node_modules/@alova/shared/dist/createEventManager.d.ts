export interface EventManager<E extends object> {
    on<K extends keyof E>(type: K, handler: (event: E[K]) => void): () => void;
    off<K extends keyof E>(type: K, handler?: (event: E[K]) => void): () => void;
    /**
     * @param type
     * @param event
     * @param sync Whether to synchronize emit events, if set to `true`, this will wait for all listeners to return results using Promise.all
     */
    emit<K extends keyof E>(type: K, event: E[K]): any[];
    eventMap: EventMap<E>;
}
type EventMap<E extends object> = {
    [K in keyof E]?: ((event: E[K]) => void)[];
};
declare const createEventManager: <E extends object>() => EventManager<E>;
export default createEventManager;
export declare const decorateEvent: <OnEvent extends (handler: (event: any) => void) => any>(onEvent: OnEvent, decoratedHandler: (handler: Parameters<OnEvent>[0], event: Parameters<Parameters<OnEvent>[0]>[0]) => void) => (handler: Parameters<OnEvent>[0]) => any;
