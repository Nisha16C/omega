import { GeneralFn } from './types';
export declare const PromiseCls: PromiseConstructor;
export declare const promiseResolve: <T>(value: T) => Promise<Awaited<T>>;
export declare const promiseReject: <T>(value: T) => Promise<never>;
export declare const ObjectCls: ObjectConstructor;
export declare const RegExpCls: RegExpConstructor;
export declare const undefinedValue: undefined;
export declare const nullValue: null;
export declare const trueValue = true;
export declare const falseValue = false;
export declare const promiseThen: <T, TResult1 = T, TResult2 = never>(promise: Promise<T>, onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null) => Promise<TResult1 | TResult2>;
export declare const promiseCatch: <T, TResult = never>(promise: Promise<T>, onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null) => Promise<T | TResult>;
export declare const promiseFinally: <T>(promise: Promise<T>, onfinally?: (() => void) | undefined | null) => Promise<T>;
export declare const JSONStringify: <T>(value: T, replacer?: (this: any, key: string, value: any) => any, space?: string | number) => string;
export declare const JSONParse: (value: string) => any;
export declare const setTimeoutFn: (fn: GeneralFn, delay?: number) => number;
export declare const clearTimeoutTimer: (timer: NodeJS.Timeout | string | number) => void;
export declare const objectKeys: (obj: object) => string[];
export declare const objectValues: (obj: object) => any[];
export declare const forEach: <T>(ary: T[], fn: (item: T, index: number, ary: T[]) => void) => void;
export declare const pushItem: <T>(ary: T[], ...item: T[]) => number;
export declare const mapItem: <T, R>(ary: T[], callbackfn: (value: T, index: number, array: T[]) => R) => R[];
export declare const filterItem: <T>(ary: T[], predicate: (value: T, index: number, array: T[]) => unknown) => T[];
export declare const shift: <T>(ary: T[]) => T | undefined;
export declare const slice: <T>(ary: T[], start?: number, end?: number) => T[];
export declare const splice: <T>(ary: T[], start: number, deleteCount?: number, ...items: T[]) => T[];
export declare const len: (data: any[] | Uint8Array | string) => number;
export declare const isArray: (arg: any) => arg is any[];
export declare const deleteAttr: <T extends Record<any, any>>(arg: T, attr: keyof T) => boolean;
export declare const typeOf: (arg: any) => "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function";
export declare const regexpTest: (reg: RegExp, str: string) => boolean;
export declare const includes: <T>(ary: T[], target: T) => boolean;
export declare const valueObject: <T>(value: T, writable?: boolean) => {
    value: T;
    writable: boolean;
};
export declare const defineProperty: (o: object, key: string | symbol, value: any, isDescriptor?: boolean) => object;
export declare const defaultIsSSR: boolean;
export declare const isSSR: boolean;
/** cache mode */
export declare const MEMORY = "memory";
export declare const STORAGE_RESTORE = "restore";
