import { GeneralState } from '@/types';
type UpdateFn<Data> = (state: GeneralState<Data>, newValue: Data) => void;
type DehydrateFn<Data> = (state: GeneralState<Data>) => Data;
type ExportFn<Data> = (state: GeneralState<Data>) => GeneralState<Data>;
export declare class FrameworkReadableState<Data, Key extends string> {
    s: GeneralState<Data>;
    k: Key;
    protected $dhy: DehydrateFn<Data>;
    protected $exp: ExportFn<Data>;
    constructor(state: GeneralState<Data>, key: Key, dehydrate: DehydrateFn<Data>, exportState: ExportFn<Data>);
    get v(): Data;
    get e(): GeneralState<Data>;
}
export declare class FrameworkState<Data, Key extends string> extends FrameworkReadableState<Data, Key> {
    private $upd;
    constructor(state: GeneralState<Data>, key: Key, dehydrate: DehydrateFn<Data>, exportState: ExportFn<Data>, update: UpdateFn<Data>);
    set v(newValue: Data);
    get v(): Data;
}
export {};
