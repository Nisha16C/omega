import { AlovaGenerics, Method } from 'alova';
import { AlovaEvent } from 'alova/client';
export declare class AlovaEventBase<AG extends AlovaGenerics> implements AlovaEvent<AG> {
    readonly args: any[];
    readonly method: Method<AG>;
    constructor(method: Method<AG>, args: any[]);
    clone(): this;
    static spawn(method: Method, args: any[]): AlovaEventBase<any>;
}
export declare class AlovaSuccessEvent<AG extends AlovaGenerics> extends AlovaEventBase<AG> {
    readonly fromCache: boolean;
    readonly data: AG['Responded'];
    constructor(base: AlovaEventBase<AG>, data: AG['Responded'], fromCache: boolean);
}
export declare class AlovaErrorEvent<AG extends AlovaGenerics> extends AlovaEventBase<AG> {
    readonly error: any;
    constructor(base: AlovaEventBase<AG>, error: any);
}
export declare class AlovaCompleteEvent<AG extends AlovaGenerics> extends AlovaEventBase<AG> {
    /** 响应状态 */
    status: 'success' | 'error';
    /** data数据是否来自缓存，当status为error时，fromCache始终为false */
    readonly fromCache: boolean;
    readonly data: AG['Responded'];
    readonly error: any;
    constructor(base: AlovaEventBase<AG>, status: 'success' | 'error', data: AG['Responded'], fromCache: boolean, error: any);
}
